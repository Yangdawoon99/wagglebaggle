name: Deploy to AWS

on:
  push:
    branches:
      - main

env:
  S3_BUCKET_NAME: "terraform-3tier-bucket0501"
  AWS_REGION: "ap-southeast-2"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Checkout repository

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: github-actions-session
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: aws sts get-caller-identity

    - name: Grant execute permissions for delete script
      run: chmod +x scripts/delete_old_files.sh

    - name: Zip files
      run: zip -r my-app.zip .

    - name: Verify ZIP file creation
      run: ls -lh my-app.zip

    - name: Upload to S3
      run: |
        aws s3 cp my-app.zip s3://$S3_BUCKET_NAME/my-app.zip --region $AWS_REGION
        echo "File uploaded to S3://$S3_BUCKET_NAME/my-app.zip"

    - name: Notify Slack for approval
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "channel": "#deployments",
            "text": "New deployment to production requires approval. Please review and approve."
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Wait for approval
      id: approval
      uses: chelnak/approve-pull-request@v2
      with:
        github-token: ${{ secrets.MY_GITHUB_TOKEN }}
        wait-interval-seconds: 60
        timeout-minutes: 30

    - name: Check approval
      if: steps.approval.outputs.approved != 'true'
      run: exit 1

    - name: Deploy to CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name dev-CodeDeploy \
          --deployment-group-name dev-deploygroup \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=my-app.zip \
          --region $AWS_REGION

    - name: Verify CodeDeploy deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name dev-CodeDeploy --deployment-group-name dev-deploygroup --query 'deployments[0]' --output text --region $AWS_REGION)
        echo "Deployment ID: $DEPLOYMENT_ID"
        aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --region $AWS_REGION

    - name: Notify Slack deployment started
      if: always()
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "channel": "#deployments",
            "text": "Deployment to production has started."
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Notify Slack deployment success
      if: success()
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "channel": "#deployments",
            "text": "Deployment to production was successful."
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Notify Slack deployment failure
      if: failure()
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "channel": "#deployments",
            "text": "Deployment to production failed."
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
