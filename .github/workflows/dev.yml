name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      approve:
        description: 'Approve deployment'
        required: true
        default: 'false'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'

env:
  S3_BUCKET_NAME: "terraform-3tier-bucket0501"
  AWS_REGION: "ap-southeast-2"

permissions:
  id-token: write
  contents: read

jobs:
  request-approval:
    runs-on: ubuntu-latest
    steps:
    - name: Send deployment request to Slack
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{
          "text": "Deployment request for ${{ github.event.inputs.environment }} environment.",
          "attachments": [
            {
              "text": "Please approve or stop the deployment.",
              "fallback": "You are unable to choose an action",
              "callback_id": "deploy_approval",
              "color": "#3AA3E3",
              "attachment_type": "default",
              "actions": [
                {
                  "name": "approve",
                  "text": "Approve",
                  "type": "button",
                  "value": "approve"
                },
                {
                  "name": "stop",
                  "text": "Stop",
                  "type": "button",
                  "value": "stop"
                }
              ]
            }
          ]
        }' ${{ secrets.SLACK_WEBHOOK_URL }}
    - name: Wait for approval
      run: |
        echo "Waiting for approval..."
        sleep 60

  deploy:
    runs-on: ubuntu-latest
    needs: request-approval
    if: ${{ github.event.inputs.approve == 'true' }}
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: github-actions-session
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: aws sts get-caller-identity

    - name: Grant execute permissions for delete script
      run: chmod +x scripts/delete_old_files.sh

    - name: Zip files
      run: zip -r my-app.zip .

    - name: Verify ZIP file creation
      run: ls -lh my-app.zip

    - name: Upload to S3
      run: |
        aws s3 cp my-app.zip s3://$S3_BUCKET_NAME/my-app.zip --region $AWS_REGION
        echo "File uploaded to S3://$S3_BUCKET_NAME/my-app.zip"
      continue-on-error: true

    - name: Send S3 upload notification
      if: success() || failure()
      run: |
        status="SUCCESS"
        if [ "${{ job.status }}" == "failure" ]; then status="FAILURE"; fi
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"S3 upload status: $status\"}" ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Deploy to CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name dev-CodeDeploy \
          --deployment-group-name dev-deploygroup \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=my-app.zip \
          --region $AWS_REGION
      continue-on-error: true

    - name: Send deployment notification
      if: success() || failure()
      run: |
        status="SUCCESS"
        if [ "${{ job.status }}" == "failure" ]; then status="FAILURE"; fi
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"CodeDeploy status: $status\"}" ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Verify CodeDeploy deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name dev-CodeDeploy --deployment-group-name dev-deploygroup --query 'deployments[0]' --output text --region $AWS_REGION)
        echo "Deployment ID: $DEPLOYMENT_ID"
        aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --region $AWS_REGION
      continue-on-error: true

    - name: Send verification notification
      if: success() || failure()
      run: |
        status="SUCCESS"
        if [ "${{ job.status }}" == "failure" ]; then status="FAILURE"; fi
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Deployment verification status: $status\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
